pipeline {
    agent {
        label "agent"; 
    }
    environment {
        project_id = sh(script: 'gcloud config get-value project', returnStdout: true).trim()
        artifact_registry = 'us-central1-docker.pkg.dev'
        service_name = 'pythonapp'
        repo = 'jenkins-repo'
        workdir = 'app'
    }
    stages {
        stage('Preparando el entorno') {
            steps {
                sh 'whoami'
                sh 'echo POR FAVOR !!!!!! fijaos en este dato'
                sh 'hostname'
                dir("${workdir}") {
                    sh 'python3 -m pip install -r requirements.txt'
                }
            }
        }
        
        stage('Calidad de código') {
            steps {
                sh 'whoami'
                sh 'hostname'
                dir('app') {
                    sh 'python3 -m pylint app.py'
                }
            }
        }

        stage('Tests') {         
            steps {
                sh 'whoami'
                sh 'hostname'
                dir('app') {
                    sh 'python3 -m pytest'
                }
            }
        }

        stage('Construcción del artefacto') {
            steps {
                sh 'whoami'
                sh 'hostname'
                dir('app') {
                    sh 'docker build . -t ${artifact_registry}/${project_id}/${repo}/${service_name}:${GIT_COMMIT}'
                }
            }
        }

        stage('Subir artefacto a repositorio docker') {
            steps {
                sh 'gcloud auth configure-docker ${artifact_registry} --quiet'
                sh 'docker push ${artifact_registry}/${project_id}/${repo}/${service_name}:${GIT_COMMIT}'
            }
        }

        stage('Verificar estado del contenedor') {
            steps {
                script {
                    def containerRunning = sh(returnStatus: true, script: "gcloud run services describe ${service_name} --format='value(status.url)' --region=\"us-central1\"") == 0

                    if (containerRunning) {
                        echo "El contenedor está en ejecución. Se actualizará la imagen."
                        sh("gcloud run services update ${service_name} --image=\"${artifact_registry}/${project_id}/${repo}/${service_name}:${GIT_COMMIT}\" --region=\"us-central1\" --port=5000")
                    } else {
                        echo "El contenedor no está en ejecución. Se realizará la implementación del servicio."
                        sh("gcloud run deploy ${service_name} --image=\"${artifact_registry}/${project_id}/${repo}/${service_name}:${GIT_COMMIT}\" --region=\"us-central1\" --port=5000")
                    }
                }
                sh 'gcloud run services add-iam-policy-binding ${service_name} --member="allUsers" --role="roles/run.invoker" --region="us-central1"'
            }
        }
    }

    // stage('Despliegue') {
    //     steps {
    //         sh 'whoami'
    //         sh ' echo si el dato anterior es root ... NOS HEMOS VUELTO LOCOS Y VAMOS A MORIR TODOS!!!!!!'
    //         sh 'hostname'
    //         sh 'docker run --name srgapp -d -p 5000:5000 srgjenkins:${GIT_COMMIT}'
    //     }
    // }
}
